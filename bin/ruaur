#!/usr/bin/env ruby

require "hilighter"
require "optparse"
require "ruaur"

class RuAURExit
    GOOD = 0
    INVALID_OPTION = 1
    INVALID_ARGUMENT = 2
    MISSING_ARGUMENT = 3
    INVALID_OPERATION = 4
    MULTIPLE_OPERATIONS = 5
    EXCEPTION = 6
    AMBIGUOUS_ARGUMENT = 6
end

def parse(args)
    options = Hash.new
    options["operation"] = nil
    options["options"] = Array.new
    options["verbose"] = false

    parser = OptionParser.new do |opts|
        opts.summary_width = 19

        opts.banner =
            "Usage: #{File.basename($0)} <operation> [OPTIONS] [pkgs]"

        opts.on("", "OPTIONS")

        opts.on("-h", "--help", "Display this help message") do
            puts opts
            exit
        end

        opts.on("--nocolor", "Disable colorized output") do
            Hilighter.disable
        end

        opts.on(
            "-v",
            "--verbose",
            "Show backtrace when error occurs"
        ) do
            options["verbose"] = true
        end

        opts.on("--version", "Show version") do
            __FILE__.match(/ruaur-(\d+\.\d+\.\d+)/) do |m|
                puts m[1]
            end
            exit RuAURExit::GOOD
        end

        opts.on("", "OPERATIONS")

        opts.on("-Q", "--query", "Query the package database") do
            if (options["operation"])
                puts opts
                exit RuAURExit::MULTIPLE_OPERATIONS
            end
            options["operation"] = RuAUR::Operation::Query
        end

        opts.on("-R", "--remove", "Remove package(s)") do
            if (options["operation"])
                puts opts
                exit RuAURExit::MULTIPLE_OPERATIONS
            end
            options["operation"] = RuAUR::Operation::Remove
        end

        opts.on("-S", "--sync", "Synchronize package(s)") do
            if (options["operation"])
                puts opts
                exit RuAURExit::MULTIPLE_OPERATIONS
            end
            options["operation"] = RuAUR::Operation::Sync
        end

        opts.on("", "QUERY_OPTIONS")

        opts.on(
            "-i",
            "--info",
            "Display information for given package(s)"
        ) do
            options["options"].push(RuAUR::Options::Info)
        end

        opts.on(
            "-o",
            "--owns",
            "Search for packages that own the specified file(s)"
        ) do
            options["options"].push(RuAUR::Options::Owns)
        end

        opts.on("", "REMOVE_OPTIONS")

        opts.on("-n", "--nosave", "Completely remove package") do
            options["options"].push(RuAUR::Options::NoSave)
        end

        opts.on("", "SYNC_OPTIONS")

        opts.on("-c", "--clean", "Remove packages from the cache") do
            options["options"].push(RuAUR::Options::Clean)
        end

        opts.on(
            "--names-only",
            "Only show package names (useful for tab-completion)",
        ) do
            options["options"].push(RuAUR::Options::NamesOnly)
        end

        opts.on(
            "--noconfirm",
            "Bypass any and all \"Are you sure?\" messages"
        ) do
            options["options"].push(RuAUR::Options::NoConfirm)
        end

        opts.on(
            "-s",
            "--search",
            "Search the sync database and AUR for package(s)"
        ) do
            options["options"].push(RuAUR::Options::Search)
        end

        opts.on("-u", "--sysupgrade", "Upgrade all packages") do
            options["options"].push(RuAUR::Options::Upgrade)
        end

        opts.on(
            "-w",
            "--downloadonly",
            "Retrieve packages from the server, but do not install"
        ) do
            options["options"].push(RuAUR::Options::Download)
        end
    end

    begin
        parser.parse!
    rescue OptionParser::InvalidOption => e
        puts e.message
        puts parser
        exit RuAURExit::INVALID_OPTION
    rescue OptionParser::InvalidArgument => e
        puts e.message
        puts parser
        exit RuAURExit::INVALID_ARGUMENT
    rescue OptionParser::MissingArgument => e
        puts e.message
        puts parser
        exit RuAURExit::MISSING_ARGUMENT
    rescue OptionParser::AmbiguousOption => e
        puts e.message
        puts parser
        exit RuAURExit::AMBIGUOUS_ARGUMENT
    end

    if (!RuAUR::validate_options(options))
        puts parser
        exit RuAURExit::INVALID_OPERATION
    end

    options["packages"] = args

    return options
end

# Parse CLI args
options = parse(ARGV)

begin
    ruaur = RuAUR.new(!Hilighter.disable?)
    case options["operation"]
    when RuAUR::Operation::Query
        ruaur.query(options["packages"], options["options"])
    when RuAUR::Operation::Remove
        ruaur.remove(options["packages"], options["options"])
    when RuAUR::Operation::Sync
        ret = ruaur.sync(options["packages"], options["options"])
        puts ret if (ret)
    end
rescue Interrupt
    # ^C
    # Exit gracefully
rescue Errno::EPIPE
    # Do nothing. This can happen if piping to another program such as
    # less. Usually if less is closed before we're done with STDOUT.
rescue RuAUR::Error => e
    puts e.message
    exit RuAURExit::EXCEPTION
rescue Exception => e
    $stderr.puts
    $stderr.puts "Oops! Looks like an error has occured! If the " \
        "error persists, file a bug at:"
    $stderr.puts
    $stderr.puts "    https://gitlab.com/mjwhitta/ruaur/issues"
    $stderr.puts
    $stderr.puts "Maybe the message below will help. If not, you " \
        "can use the --verbose flag to get"
    $stderr.puts "a backtrace."

    $stderr.puts e.message.white.on_red
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts line.light_yellow
        end
    end
    exit RuAURExit::EXCEPTION
end
exit RuAURExit::GOOD
