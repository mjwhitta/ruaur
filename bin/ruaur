#!/usr/bin/env ruby

require "colorize"
require "optparse"
require "ruaur"

class RuAURExit
    GOOD = 0
    INVALID_OPTION = 1
    INVALID_ARGUMENT = 2
    MISSING_ARGUMENT = 3
    INVALID_OPERATION = 4
    MULTIPLE_OPERATIONS = 5
    EXCEPTION = 6
end

class Operation
    REMOVE = 1
    SYNC = 2
end

def parse(args)
    options = Hash.new
    options["operation"] = nil
    options["verbose"] = false

    # Sync options
    options["clean"] = false
    options["names-only"] = false
    options["noconfirm"] = false
    options["search"] = false
    options["upgrade"] = false

    # Remove options
    options["nosave"] = false

    parser = OptionParser.new do |opts|
        opts.banner =
            "Usage: #{File.basename($0)} <operation> [OPTIONS] [pkgs]"

        opts.on("", "OPTIONS")

        opts.on("-h", "--help", "Display this help message") do
            puts opts
            exit
        end

        opts.on("--nocolor", "Disable colorized output") do
            String.disable_colorization = true
        end

        opts.on(
            "-v",
            "--verbose",
            "Show backtrace when error occurs"
        ) do
            options["verbose"] = true
        end

        opts.on("", "OPERATIONS")

        opts.on("-R", "--remove", "Remove packages") do
            if (options["operation"])
                puts opts
                exit RuAURExit::MULTIPLE_OPERATIONS
            end
            options["operation"] = Operation::REMOVE
        end

        opts.on("-S", "--sync", "Synchronize packages") do
            if (options["operation"])
                puts opts
                exit RuAURExit::MULTIPLE_OPERATIONS
            end
            options["operation"] = Operation::SYNC
        end

        opts.on("", "SYNC_OPTIONS")

        opts.on("-c", "--clean", "Remove packages from the cache") do
            options["clean"] = true
        end

        opts.on(
            "--names-only",
            "Only show package names (useful for tab-completion)",
        ) do
            options["names-only"] = true
        end

        opts.on(
            "--noconfirm",
            "Bypass any and all \"Are you sure?\" messages"
        ) do
            options["noconfirm"] = true
        end

        opts.on(
            "-s",
            "--search",
            "Search the sync database and AUR for packages"
        ) do
            options["search"] = true
        end

        opts.on("-u", "--sysupgrade", "Upgrade all packages") do
            options["upgrade"] = true
        end

        opts.on("", "REMOVE_OPTIONS")

        opts.on("-n", "--nosave", "Completely remove package") do
            options["nosave"] = true
        end
    end

    begin
        parser.parse!
    rescue OptionParser::InvalidOption => e
        puts e.message
        puts parser
        exit RuAURExit::INVALID_OPTION
    rescue OptionParser::InvalidArgument => e
        puts e.message
        puts parser
        exit RuAURExit::INVALID_ARGUMENT
    rescue OptionParser::MissingArgument => e
        puts e.message
        puts parser
        exit RuAURExit::MISSING_ARGUMENT
    end

    if (!validate(options))
        puts parser
        exit RuAURExit::INVALID_OPERATION
    end

    options["packages"] = args

    return options
end

def validate(options)
    case options["operation"]
    when Operation::REMOVE
        if (
            options["clean"] ||
            options["names-only"] ||
            options["noconfirm"] ||
            options["search"] ||
            options["upgrade"]
        )
            return false
        end
    when Operation::SYNC
        return false if (options["nosave"])

        if (options["clean"])
            if (
                options["names-only"] ||
                options["search"] ||
                options["upgrade"]
            )
                return false
            end
        elsif (options["search"])
            return false if (options["clean"] || options["upgrade"])
        elsif (options["upgrade"])
            if (
                options["clean"] ||
                options["names-only"] ||
                options["search"]
            )
                return false
            end
        end
    else
        return false
    end

    return true
end

# Parse CLI args
options = parse(ARGV)

begin
    ruaur = RuAUR.new(!String.disable_colorization)

    case options["operation"]
    when Operation::REMOVE
        ruaur.remove(options["packages"], options["nosave"])
    when Operation::SYNC
        if (options["clean"])
            ruaur.clean(options["noconfirm"])
        elsif (options["search"])
            puts ruaur.search(
                options["packages"].join(" "),
                options["names-only"]
            )
        elsif (options["upgrade"])
            ruaur.upgrade(options["noconfirm"])
        else
            ruaur.install(options["packages"], options["noconfirm"])
        end
    end
rescue Interrupt
    # ^C
    # Exit gracefully
rescue Errno::EPIPE
    # Do nothing. This can happen if piping to another program such as
    # less. Usually if less is closed before we're done with STDOUT.
rescue RuAUR::Error => e
    puts e.message
    exit RuAURExit::EXCEPTION
rescue Exception => e
    $stderr.puts "Oops! Looks like an error has occured! If the " \
        "error persists, file a bug at:".word_wrap
    $stderr.puts
    $stderr.puts "    https://gitlab.com/mjwhitta/ruaur/issues"
    $stderr.puts
    $stderr.puts "Maybe the message below will help. If not, you " \
        "can use the --verbose flag to get a backtrace.".word_wrap

    $stderr.puts e.message.white.on_red
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts line.light_yellow
        end
    end
    exit RuAURExit::EXCEPTION
end
exit RuAURExit::GOOD
